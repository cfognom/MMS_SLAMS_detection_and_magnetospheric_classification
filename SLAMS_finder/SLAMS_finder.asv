%% Start
db_path = 'C:\Users\carlh\Documents\MATLAB\Exjobb\Carl\data';
sc = 'mms1';

%% bowshock dates
% Dates when MMS is near bow shock
% Taken form MMS scence data center orbit plots
% Phase 2 begins around 2017-03, so the probes might be at the 'edges' of the
% bow shock onwards from this date
dates_bowshock = sort(datetime([
    "2015-10-01", "2016-01-30"; % near bowshock
	"2016-11-01", "2017-05-09"; % near bowshock
	"2017-09-08", "2018-05-23";
	"2018-09-23", "2019-06-16";
	"2019-09-26", "2020-03-25"], 'TimeZone', 'UTC'), 'ascend');
int_bowshock = datetime_int(dates_bowshock);

dates_SROI = read_SROI(sc);
int_SROI = datetime_int(dates_SROI);

int_SLAMS = intersect_int(int_bowshock, int_SROI);
int_SLAMS = int_SLAMS(40);
rng(100)
n_trainPoints = 1000;
[trainPoints, idx] = get_train_points(int_SLAMS, n_trainPoints);
train_data_parameters = { ...
    {"mms1_fgm_srvy_l2", "b_gse", "abs"}, ...
    {"mms1_fpi_fast_l2_dis-moms", ["bulkv_gse", "numberdensity"], ["abs", ""]}
}; %#ok<CLARRSTR>
X = get_train_data(trainPoints, train_data_parameters);

% if exist('isLoaded', 'var') == 0 || ~isLoaded
%     ts = loadTimeSeries(irf.tint(datetimeToEpochTT(dates_bowshock(4,1)), datetimeToEpochTT(dates_bowshock(4,2))));
%     isLoaded = true;
% end

trainPoints = arrayfun(@(x) double(irf_time(posixtime(x), 'epoch>ttns')), trainPoints);

% starttime = [2018 01 02 00 00 00]; % Interplanetary shock
% stoptime = [2018 01 10 00 00 00];
starttime = [2019 12 28 10 00 00];
stoptime = [2019 12 28 12 00 00];

% starttime = [2017 12 15 00 00 00];
% stoptime = [2017 12 16 00 00 00];

startepochtt = irf_time(starttime, 'vector>epochtt');
stopepochtt = irf_time(stoptime, 'vector>epochtt');
tint = irf.tint(startepochtt, stopepochtt);
% tint = int_SLAMS.get_tint()

if exist('isLoaded', 'var') == 0 || ~isLoaded
    ts = loadTimeSeries(tint);
    isLoaded = true;
end

[trimmed_tint_ttns, trimmed_tint_epoch] = intersect_ts(ts.values, 60);
n_max = get_max_n(ts.values);
n = min(10000, n_max);
% n = n_max;
t = get_time_instants(trimmed_tint_ttns, n);
[t_epoch, tind] = get_time_instants(trimmed_tint_epoch, n);

%%
% length(ts('b_gse'))
% length(ts('dis_numberdensity'))
% length(ts('dis_bulkv_gse'))

% t = trainPoints;

ts('abs_b_gse') = irf_abs(ts('b_gse'));
ts('abs_dis_bulkv_gse') = irf_abs(ts('dis_bulkv_gse'));
% n = 10000;
% t = linspace(double(ts('abs_b_gse').time(1).epoch), double(ts('abs_b_gse').time(end).epoch), n);
% t = double(ts('dis_numberdensity').time.epoch);
% x1 = interp1(double(ts('abs_b_gse').time.epoch), min(ts('abs_b_gse').data, 50), t)/50;
x1 = interp1(double(ts('abs_b_gse').time.epoch), ts('abs_b_gse').data, t)/50;
% y = interp1(double(ts('dis_numberdensity').time.epoch), ts('dis_numberdensity').data, t);
x2 = interp1(double(ts('dis_numberdensity').time.epoch), ts('dis_numberdensity').data, t)/120;
x3 = interp1(double(ts('abs_dis_bulkv_gse').time.epoch), ts('abs_dis_bulkv_gse').data, t)/600;
% x4 = interp1(double(ts('dis_temppara').time.epoch), ts('dis_temppara').data, trainPoints)/10000;

figure;
plot3(x1, x2, x3, '.');
xlabel('abs(b)');
ylabel('n_i');

x = [x1' x2' x3'];
numClust = 3;
% point2cluster = dbscan(x, 0.04, 5);
point2cluster = kmeans(x, 3);
% size(point2cluster)
% [clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(x, 0.25);

% numClust = length(clustMembsCell);
figure(10),clf,hold on
cVec = 'bgrcmykbgrcmykbgrcmykbgrcmyk';%, cVec = [cVec cVec];
% for k = 1:min(numClust,length(cVec))
%     myMembers = clustMembsCell{k};
%     myClustCen = clustCent(:,k);
%     plot(x(1,myMembers),x(2,myMembers),[cVec(k) '.'])
%     % disp(size(ts('dis_numberdensity').time(myMembers)));
%     % irf_pl_mark(irf_time(ts('dis_numberdensity').time.epoch(myMembers), 'ttns>epoch'), cVec(k));
%     % irf_pl_mark([irf_time([2018 01 03 15 00 30], 'vector>epoch'); irf_time([2018 01 03 15 00 45], 'vector>epoch')], cVec(k))
%     plot(myClustCen(1),myClustCen(2),'o','MarkerEdgeColor','k','MarkerFaceColor',cVec(k), 'MarkerSize',10)
% end

gscatter(x(:,1), x(:,2), point2cluster, cVec);
% n = length(point2cluster);
% for i = 1:n
%     plot(x(i,1), x(i,2), [cVec(point2cluster(i)) '.'])
% end

xlabel('abs(b)');
ylabel('n_i');
% title(['no shifting, numClust:' int2str(numClust)])

% MMS_load_fgm_srvy_l2_sc1(starttime,stoptime);
% MMS_load_fpi_l2_moms_sc1(starttime,stoptime);
% MMS_load_mec_srvy_l2_ephts04d_sc1(starttime(1:3));

global b_smooth SLAMS_time;
[b_smooth, SLAMS_time] = find_SLAMS(ts('abs_b_gse'));

mapToGlobal(ts);
MMS_PlotSLAMS_SC1(starttime, stoptime)

% irf_pl_mark(trimmed_tint_epoch, 'b')

% irf_pl_mark(irf_time(atint, 'ttns>epoch'))

for i=1:size(tind,1)
    ind = tind(i,1):tind(i,2);
    markClusters(t_epoch(ind), point2cluster(ind))
end
% irf_pl_mark([irf_time([2018 01 03 00 00 00], 'vector>epoch'); irf_time([2018 01 04 00 00 00], 'vector>epoch'); irf_time([2018 01 05 00 00 00], 'vector>epoch'); irf_time([2018 01 06 00 00 00], 'vector>epoch')], 'b')

function n_max = get_max_n(ts)
    n_ts = length(ts);
    tmp = zeros(n_ts,1);
    for i = 1:n_ts
        tmp(i) = length(ts{i}.time);
    end
    % disp(tmp)
    n_max = max(tmp);
end

function markClusters(time, point2cluster)
    cVec = 'bgrcmykbgrcmykbgrcmykbgrcmyk';
    currentClass = point2cluster(1);
    classStart = time(1);
    n = length(point2cluster);
    for i = 2:n
        newClass = point2cluster(i);
        if newClass ~= currentClass || i == n
            classEnd = time(i);
            irf_pl_mark([classStart, classEnd], cVec(currentClass))
            % irf_pl_mark([irf_time(classStart, 'ttns>epoch'), irf_time(classEnd, 'ttns>epoch')], cVec(currentClass))
            classStart = classEnd;
        end
        currentClass = newClass;
    end
end

function ts = loadTimeSeries(tint)
    fpiVariables = ["prestensor_gse", "bulkv_gse", "numberdensity", "temppara", "tempperp", "energyspectr_omni", "energy"];

    ts = containers.Map;
    ts = MMS_load("mms1_fgm_srvy_l2", "b_gse", tint, ts);
    ts = MMS_load("mms1_fpi_fast_l2_dis-moms", fpiVariables, tint, ts);
%     ts = MMS_load("mms1_fpi_fast_l2_des-moms", fpiVariables, tint, ts);
    ts = MMS_load("mms1_mec_srvy_l2_ephts04d", "r_gse", tint, ts);
    ts = MMS_load("mms1_mec_srvy_l2_ephts04d", "fieldline_type", tint, ts);
end

function mapToGlobal(map)
    global B1gse vi1gse ve1gse ni1 ne1 Tiperp1 Tipar1 Teperp1 Tepar1 pressuretensori1gse pressuretensore1gse Eispectomni1 Eespectomni1 Ei1 Ee1 R1 R2;
    B1gse = map("b_gse");
    vi1gse = map("dis_bulkv_gse");
    % ve1gse = map("des_bulkv_gse");
    ni1 = map("dis_numberdensity");
    % ne1 = map("des_numberdensity");
    Tiperp1 = map("dis_tempperp");
    Tipar1 = map("dis_temppara");
    % Teperp1 = map("des_tempperp");
    % Tepar1 = map("des_temppara");
    pressuretensori1gse = map("dis_prestensor_gse");
    % pressuretensore1gse = map("des_prestensor_gse");
    Eispectomni1 = map("dis_energyspectr_omni");
    % Eespectomni1 = map("des_energyspectr_omni");
    Ei1 = map("dis_energy");
    % Ee1 = map("des_energy");
    R1 = map("r_gse");
    R2 = map("fieldline_type");
end